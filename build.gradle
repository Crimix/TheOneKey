plugins {
    id 'net.neoforged.gradle' version '[6.0.13, 6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'maven-publish'
apply from: 'https://raw.githubusercontent.com/Crimix/bml/1.20/common.gradle'
apply from: 'https://raw.githubusercontent.com/Crimix/bml/1.20/shadow.gradle'

version = version_major + '.' + version_minor + '.' + version_patch
group = "${mod_group}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_archivesBaseName + "-" + mc_version

// Mojang ships Java 17 to end users in 1.18+ instead of Java 16 in 1.17 so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mappings_channel, version: mappings_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Disable mixin refmaps
            property 'mixin.env.disableRefMap', 'true'

            mods {
                theonekey {
                    source sourceSets.main
                }
            }
        }
        dev {
            parent runs.client
            taskName 'runDev'
            args '--username', 'Dev2'
        }
        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Disable mixin refmaps
            property 'mixin.env.disableRefMap', 'true'

            mods {
                theonekey {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'theonekey', '--all', '--output', file("src/main/generated_resources"), '--existing', file('src/main/resources/')

            mods {
                theonekey {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    mavenCentral()
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl/"
    }
    maven {
        name = "theillusivec4"
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/crimix/bml")
        credentials {
            username = github_user
            password = github_token
        }
        content {
            includeGroup "com.black_dog20.bml"
        }
    }
    mavenLocal()
}

dependencies {
    minecraft "net.neoforged:forge:${mc_version}-${neo_version}"

    shadowCompileOnly fg.deobf("com.black_dog20.bml:bml:${bml_version}")
    runtimeOnly fg.deobf("com.black_dog20.bml:bml:${bml_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "theonekey",
                "Specification-Vendor": "black_dog20",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": "theonekey",
                "Implementation-Version": archiveVersion.get(),
                "Implementation-Vendor" :"black_dog20",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    configurations = [project.configurations.shadowCompileOnly]
    relocate 'com.black_dog20.bml', 'com.black_dog20.theonekey.repack.bml'
}

task apiJar(type: Jar) {
    archiveClassifier.set('api')
    include 'com/black_dog20/theonekey/api/**/*'
    from sourceSets.main.allSource
    from sourceSets.main.output
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

artifacts {
    archives apiJar
    archives sourcesJar
}

//curseforge {
//    apiKey = curse_apiKey
//    project {
//        id = ''
//        changelogType = 'markdown'
//        changelog = "As always find the changelog here [CHANGELOG](${changelog_url})"
//        releaseType = 'release'
//        addArtifact(sourcesJar)
//        addArtifact(apiJar)
//        addGameVersion 'Forge'
//        addGameVersion 'Java 17'
//        addGameVersion '1.19.2'
//    }
//}

tasks.withType(AbstractPublishToMaven) { task ->
    dependsOn(shadowJar)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId 'theonekey'
            version mc_version + '-' + version_major + '.' + version_minor + '.' + version_patch
            artifact jar
        }
        mavenJava(MavenPublication) {
            artifactId 'theonekey'
            version mc_version + '-' + version_major + '.' + version_minor + '.' + version_patch
            artifact sourcesJar
        }
        mavenJava(MavenPublication) {
            artifactId 'theonekey'
            version mc_version + '-' + version_major + '.' + version_minor + '.' + version_patch
            artifact apiJar
        }
    }
}